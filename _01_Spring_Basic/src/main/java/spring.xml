<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-3.0.xsd
    http://www.springframework.org/schema/aop
    http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
    ">
	
	<!-- XML CONFIGURATION -->
		
	<!-- We have to mention this bean when we use xml configuration, but not annotation configuration -->
	<!-- <bean id = "vehicle" class = "com.navin.telusko.Bike"></bean> -->
	
	<!-- <bean id = "tyre" class = "com.navin.telusko.Tyre"> -->
		<!-- <property name="brand" value="Ceat"></property> -->
			<!-- Here we can assign values to properties(aka variables) of objects of class whose bean is being created. It uses the setter method of the class -->
		<!-- <constructor-arg value="MRF"></constructor-arg> -->
			<!-- Here we can assign values to properties(aka variables) of objects of class whose bean is being created. It uses the constructor of the class -->
	<!-- </bean> -->
	
	<!-- ANNOTATION CONFIGURATION -->
		<!-- 1. We mention @Component above the classes whose beans we wish to create -->
		<!-- 2. We use context-component-scan with the name of package that contain classes with @Component annotation-->
	<context:component-scan base-package="com.navin.telusko"></context:component-scan>
	
	
	
</beans>